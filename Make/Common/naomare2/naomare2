// VINCENZO: AGGIORNANDO QUESTO MAREFILE ALLA VERSIONE ATTUALE SMETTE DI COMPILARE PErCHé trova versione sbgliata di boost

Nao = cppApplication + {
  dependencies = { "libbhuman", "libgamectrl" }

  // overwrite platform and c++-compiler for cross compiling
  platform = "Linux"

  if (host == "Win32") { // Even on a 64 Windows host will be Win32
    cppCompiler = "env CCACHE_CPP2=yes ccache clang++ -D__extern_always_inline=inline"
    linker = "$(utilDirRoot)/Buildchain/Windows/bin/ld.exe"
  } else {
    linker = "ld"
  }
  command = "$(linker) -o $(output) --eh-frame-hdr -m elf_x86_64 -dynamic-linker=/lib/ld-linux.so.2 $(utilDirRoot)/Buildchain/gcc/lib/crt1.o $(utilDirRoot)/Buildchain/gcc/lib/crti.o $(utilDirRoot)/Buildchain/gcc/lib/crtbegin.o $(patsubst %,-L%,$(libPaths)) @$(writefile $(buildDir)/objects,$(input)) $(linkFlags) $(LDFLAGS) $(patsubst %,-l%,$(libs)) $(utilDirRoot)/Buildchain/gcc/lib/libstdc++.so.6.0.21 $(utilDirRoot)/Buildchain/gcc/lib/libm-2.13.so $(utilDirRoot)/Buildchain/gcc/lib/libgcc_s.so.1 $(utilDirRoot)/Buildchain/gcc/lib/libc-2.21.so -lc_nonshared $(utilDirRoot)/Buildchain/gcc/lib/libgcc_s.so.1 $(utilDirRoot)/Buildchain/gcc/lib/ld-2.23.so $(utilDirRoot)/Buildchain/gcc/lib/crtend.o $(utilDirRoot)/Buildchain/gcc/lib/crtn.o"

  root = "$(srcDirRoot)"

  files = {
    "$(srcDirRoot)/Modules/**.cpp" = cppSource
    "$(srcDirRoot)/Modules/**.h"
    "$(srcDirRoot)/Platform/Nao/*.cpp" = cppSource
    "$(srcDirRoot)/Platform/Nao/*.h"
    "$(srcDirRoot)/Platform/*.cpp" = cppSource
    "$(srcDirRoot)/Platform/*.h"
    "$(srcDirRoot)/Processes/**.cpp" = cppSource
    "$(srcDirRoot)/Processes/**.h"
    "$(srcDirRoot)/Representations/**.cpp" = cppSource
    "$(srcDirRoot)/Representations/**.h"
    "$(srcDirRoot)/Tools/**.cpp" = cppSource
    "$(srcDirRoot)/Tools/**.h"
    "$(utilDirRoot)/asmjit/src/**.cpp" = cppSource
  }

  defines += {
    "TARGET_ROBOT", "__STRICT_ANSI__"
    "ASMJIT_EMBED"
    "ASMJIT_BUILD_X86"  //nella versione a 86 bit forniscono autmaticamente compatibilità col codice a 64. controllato sulla documentazione https://github.com/asmjit/asmjit
//    "ASMJIT_BUILD_X86_64"
    "ASMJIT_DISABLE_BUILDER"
    "ASMJIT_DISABLE_COMPILER"
    "ASMJIT_DISABLE_LOGGING"
    "ASMJIT_DISABLE_TEXT"
    "ASMJIT_DISABLE_VALIDATION"
//    if (configuration == "Develop") { -"NDEBUG" }
    if (configuration == "Release") { -"NDEBUG" }
  }

  output = "$(buildDir)/bhuman"

  includePaths = {
    "$(srcDirRoot)"
    "$(srcDirRoot)/Tools/Precompiled"
    "$(utilDirRoot)/SimRobot/Util/Eigen"
    "$(utilDirRoot)/GameController/include"
    "$(utilDirRoot)/Buildchain/gcc/include"
    //"$(utilDirRoot)/Buildchain/gcc/include/c++/5.2.0"
    //"$(utilDirRoot)/Buildchain/gcc/include/c++/5.2.0/i686-pc-linux-gnu"
    //"$(utilDirRoot)/Buildchain/gcc/include/c++/4.8.2"		//NEW
    //"$(utilDirRoot)/Buildchain/gcc/include/c++/4.8.2/vinc_x86_64-linux-gnu"  //NEW
    "$(utilDirRoot)/Buildchain/gcc/include/c++/5.2.0vinc"		//NEW
    "$(utilDirRoot)/Buildchain/gcc/include/c++/5.2.0vinc/vinc_x86_64-linux-gnu"  //NEW
    "$(utilDirRoot)/Buildchain/clang/include"
    "$(utilDirRoot)/fftw-3.3"
    "$(utilDirRoot)/libjpeg/src"
    "$(utilDirRoot)/snappy/include"
    "$(utilDirRoot)/asmjit/src"
  }

  libPaths = {
//    "$(utilDirRoot)/fftw-3.3/Linux32"
      "$(utilDirRoot)/fftw-3.3/Linux64"
    "$(utilDirRoot)/libjpeg/lib/Linux"
    "$(utilDirRoot)/Buildchain/gcc/lib"
//    "$(utilDirRoot)/snappy/lib/Linux/x86"
    "$(utilDirRoot)/snappy/lib/Linux/x86_64"
  }

  libs = {
    "rt-2.13", "jpeg-atom", "pthread-2.13", "pthread_nonshared", "fftw3", "fftw3f", "snappy", "asound", "dl-2.13"
  }

  cppFlags += {
    "-Wconversion"
    "-fms-extensions" //VINCENZO
    "-Wno-sign-conversion"
//    "-nostdinc -march=atom -target i686-pc-linux-gnu"
    "-nostdinc -march=atom -target x86_64-linux-gnu" //VINCENZO
    "-stdlib=libc++" //VINCENZO
//    "-std=c++14" //VINCENZO
//    "-mmmx -msse -msse2 -msse3 -mssse3"
    if (host == "Win32") { "-x c++" }
    if (tool != "vcxproj") {
      "-Wno-switch" // deactivating this is a problem because of the ENUM macro, since numOf<ENUM>s is never used in switch.
      if (configuration == "Release") {
        "-Wno-unused" // resolving debugging macros to nothing would create many of these warnings
      }
    }
  }

  linkFlags += "-nostdlib"

  if (tool == "vcxproj") {
    buildCommand = "bashexec \"uname -o | sed 's@Cygwin@$(winMarePath) --ignore-dependencies $(target) config=$(configuration)@; s@GNU\/Linux@$(linuxMarePath) --ignore-dependencies $(target) config=$(configuration)@' | bash\""
    reBuildCommand = "bashexec \"uname -o | sed 's@Cygwin@$(winMarePath) --ignore-dependencies rebuild $(target) config=$(configuration)@; s@GNU\/Linux@$(linuxMarePath) --ignore-dependencies rebuild $(target) config=$(configuration)@' | bash\""
    cleanCommand = "$(winMarePath) --ignore-dependencies clean $(target) config=$(configuration)"
  }
}
